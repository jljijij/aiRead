package com.shanzha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NovelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNovelAllPropertiesEquals(Novel expected, Novel actual) {
        assertNovelAutoGeneratedPropertiesEquals(expected, actual);
        assertNovelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNovelAllUpdatablePropertiesEquals(Novel expected, Novel actual) {
        assertNovelUpdatableFieldsEquals(expected, actual);
        assertNovelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNovelAutoGeneratedPropertiesEquals(Novel expected, Novel actual) {
        assertThat(actual)
            .as("Verify Novel auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNovelUpdatableFieldsEquals(Novel expected, Novel actual) {
        assertThat(actual)
            .as("Verify Novel relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getAuthorId()).as("check authorId").isEqualTo(expected.getAuthorId()))
            .satisfies(a -> assertThat(a.getCoverUrl()).as("check coverUrl").isEqualTo(expected.getCoverUrl()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCategoryId()).as("check categoryId").isEqualTo(expected.getCategoryId()))
            .satisfies(a -> assertThat(a.getTags()).as("check tags").isEqualTo(expected.getTags()))
            .satisfies(a -> assertThat(a.getWordCount()).as("check wordCount").isEqualTo(expected.getWordCount()))
            .satisfies(a -> assertThat(a.getChapterCount()).as("check chapterCount").isEqualTo(expected.getChapterCount()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getIsVip()).as("check isVip").isEqualTo(expected.getIsVip()))
            .satisfies(a -> assertThat(a.getCreateTime()).as("check createTime").isEqualTo(expected.getCreateTime()))
            .satisfies(a -> assertThat(a.getUpdateTime()).as("check updateTime").isEqualTo(expected.getUpdateTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNovelUpdatableRelationshipsEquals(Novel expected, Novel actual) {
        // empty method
    }
}
