package com.shanzha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChapterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterAllPropertiesEquals(Chapter expected, Chapter actual) {
        assertChapterAutoGeneratedPropertiesEquals(expected, actual);
        assertChapterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterAllUpdatablePropertiesEquals(Chapter expected, Chapter actual) {
        assertChapterUpdatableFieldsEquals(expected, actual);
        assertChapterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterAutoGeneratedPropertiesEquals(Chapter expected, Chapter actual) {
        assertThat(actual)
            .as("Verify Chapter auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterUpdatableFieldsEquals(Chapter expected, Chapter actual) {
        assertThat(actual)
            .as("Verify Chapter relevant properties")
            .satisfies(a -> assertThat(a.getChapterNo()).as("check chapterNo").isEqualTo(expected.getChapterNo()))
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getContentId()).as("check contentId").isEqualTo(expected.getContentId()))
            .satisfies(a -> assertThat(a.getWordCount()).as("check wordCount").isEqualTo(expected.getWordCount()))
            .satisfies(a -> assertThat(a.getIsVip()).as("check isVip").isEqualTo(expected.getIsVip()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getCreateTime()).as("check createTime").isEqualTo(expected.getCreateTime()))
            .satisfies(a -> assertThat(a.getUpdateTime()).as("check updateTime").isEqualTo(expected.getUpdateTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterUpdatableRelationshipsEquals(Chapter expected, Chapter actual) {
        assertThat(actual)
            .as("Verify Chapter relationships")
            .satisfies(a -> assertThat(a.getNovel()).as("check novel").isEqualTo(expected.getNovel()));
    }
}
