package com.shanzha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAllPropertiesEquals(Comment expected, Comment actual) {
        assertCommentAutoGeneratedPropertiesEquals(expected, actual);
        assertCommentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAllUpdatablePropertiesEquals(Comment expected, Comment actual) {
        assertCommentUpdatableFieldsEquals(expected, actual);
        assertCommentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAutoGeneratedPropertiesEquals(Comment expected, Comment actual) {
        assertThat(actual)
            .as("Verify Comment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentUpdatableFieldsEquals(Comment expected, Comment actual) {
        assertThat(actual)
            .as("Verify Comment relevant properties")
            .satisfies(a -> assertThat(a.getArticleId()).as("check articleId").isEqualTo(expected.getArticleId()))
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getContent()).as("check content").isEqualTo(expected.getContent()))
            .satisfies(a -> assertThat(a.getParentCommentId()).as("check parentCommentId").isEqualTo(expected.getParentCommentId()))
            .satisfies(a -> assertThat(a.getTopCommentId()).as("check topCommentId").isEqualTo(expected.getTopCommentId()))
            .satisfies(a -> assertThat(a.getDeleted()).as("check deleted").isEqualTo(expected.getDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentUpdatableRelationshipsEquals(Comment expected, Comment actual) {
        // empty method
    }
}
