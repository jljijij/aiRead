package com.shanzha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NotifyMsgAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotifyMsgAllPropertiesEquals(NotifyMsg expected, NotifyMsg actual) {
        assertNotifyMsgAutoGeneratedPropertiesEquals(expected, actual);
        assertNotifyMsgAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotifyMsgAllUpdatablePropertiesEquals(NotifyMsg expected, NotifyMsg actual) {
        assertNotifyMsgUpdatableFieldsEquals(expected, actual);
        assertNotifyMsgUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotifyMsgAutoGeneratedPropertiesEquals(NotifyMsg expected, NotifyMsg actual) {
        assertThat(actual)
            .as("Verify NotifyMsg auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotifyMsgUpdatableFieldsEquals(NotifyMsg expected, NotifyMsg actual) {
        assertThat(actual)
            .as("Verify NotifyMsg relevant properties")
            .satisfies(a -> assertThat(a.getRelatedId()).as("check relatedId").isEqualTo(expected.getRelatedId()))
            .satisfies(a -> assertThat(a.getRelatedInfo()).as("check relatedInfo").isEqualTo(expected.getRelatedInfo()))
            .satisfies(a -> assertThat(a.getOperateUserId()).as("check operateUserId").isEqualTo(expected.getOperateUserId()))
            .satisfies(a -> assertThat(a.getOperateUserName()).as("check operateUserName").isEqualTo(expected.getOperateUserName()))
            .satisfies(a -> assertThat(a.getOperateUserPhoto()).as("check operateUserPhoto").isEqualTo(expected.getOperateUserPhoto()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getMsg()).as("check msg").isEqualTo(expected.getMsg()))
            .satisfies(a -> assertThat(a.getState()).as("check state").isEqualTo(expected.getState()))
            .satisfies(a -> assertThat(a.getCreateTime()).as("check createTime").isEqualTo(expected.getCreateTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotifyMsgUpdatableRelationshipsEquals(NotifyMsg expected, NotifyMsg actual) {
        // empty method
    }
}
