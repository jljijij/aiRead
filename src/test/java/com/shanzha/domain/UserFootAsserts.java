package com.shanzha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserFootAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserFootAllPropertiesEquals(UserFoot expected, UserFoot actual) {
        assertUserFootAutoGeneratedPropertiesEquals(expected, actual);
        assertUserFootAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserFootAllUpdatablePropertiesEquals(UserFoot expected, UserFoot actual) {
        assertUserFootUpdatableFieldsEquals(expected, actual);
        assertUserFootUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserFootAutoGeneratedPropertiesEquals(UserFoot expected, UserFoot actual) {
        assertThat(actual)
            .as("Verify UserFoot auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserFootUpdatableFieldsEquals(UserFoot expected, UserFoot actual) {
        assertThat(actual)
            .as("Verify UserFoot relevant properties")
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getDocumentId()).as("check documentId").isEqualTo(expected.getDocumentId()))
            .satisfies(a -> assertThat(a.getDocumentUserId()).as("check documentUserId").isEqualTo(expected.getDocumentUserId()))
            .satisfies(a -> assertThat(a.getDocumentType()).as("check documentType").isEqualTo(expected.getDocumentType()))
            .satisfies(a -> assertThat(a.getReadStat()).as("check readStat").isEqualTo(expected.getReadStat()))
            .satisfies(a -> assertThat(a.getPraiseStat()).as("check praiseStat").isEqualTo(expected.getPraiseStat()))
            .satisfies(a -> assertThat(a.getCollectionStat()).as("check collectionStat").isEqualTo(expected.getCollectionStat()))
            .satisfies(a -> assertThat(a.getCommentStat()).as("check commentStat").isEqualTo(expected.getCommentStat()))
            .satisfies(a -> assertThat(a.getCreateTime()).as("check createTime").isEqualTo(expected.getCreateTime()))
            .satisfies(a -> assertThat(a.getUpdateTime()).as("check updateTime").isEqualTo(expected.getUpdateTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserFootUpdatableRelationshipsEquals(UserFoot expected, UserFoot actual) {
        // empty method
    }
}
