package com.shanzha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReadingVoucherAsserts {

    public static void assertReadingVoucherAllPropertiesEquals(ReadingVoucher expected, ReadingVoucher actual) {
        assertReadingVoucherAutoGeneratedPropertiesEquals(expected, actual);
        assertReadingVoucherAllUpdatablePropertiesEquals(expected, actual);
    }

    public static void assertReadingVoucherAllUpdatablePropertiesEquals(ReadingVoucher expected, ReadingVoucher actual) {
        assertReadingVoucherUpdatableFieldsEquals(expected, actual);
        assertReadingVoucherUpdatableRelationshipsEquals(expected, actual);
    }

    public static void assertReadingVoucherAutoGeneratedPropertiesEquals(ReadingVoucher expected, ReadingVoucher actual) {
        assertThat(actual)
            .as("Verify ReadingVoucher auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    public static void assertReadingVoucherUpdatableFieldsEquals(ReadingVoucher expected, ReadingVoucher actual) {
        assertThat(actual)
            .as("Verify ReadingVoucher relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getIssuedAt()).as("check issuedAt").isEqualTo(expected.getIssuedAt()))
            .satisfies(a -> assertThat(a.getExpiresAt()).as("check expiresAt").isEqualTo(expected.getExpiresAt()))
            .satisfies(a -> assertThat(a.getClaimedBy()).as("check claimedBy").isEqualTo(expected.getClaimedBy()))
            .satisfies(a -> assertThat(a.getFile()).as("check file").isEqualTo(expected.getFile()))
            .satisfies(a -> assertThat(a.getFileContentType()).as("check fileContentType").isEqualTo(expected.getFileContentType()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getNovelId()).as("check novelId").isEqualTo(expected.getNovelId()))
            .satisfies(a -> assertThat(a.getChapterId()).as("check chapterId").isEqualTo(expected.getChapterId()))
            .satisfies(a -> assertThat(a.getPackageId()).as("check packageId").isEqualTo(expected.getPackageId()));
    }

    public static void assertReadingVoucherUpdatableRelationshipsEquals(ReadingVoucher expected, ReadingVoucher actual) {
        // empty method
    }
}
