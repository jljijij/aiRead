package com.shanzha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChapterContentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterContentAllPropertiesEquals(ChapterContent expected, ChapterContent actual) {
        assertChapterContentAutoGeneratedPropertiesEquals(expected, actual);
        assertChapterContentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterContentAllUpdatablePropertiesEquals(ChapterContent expected, ChapterContent actual) {
        assertChapterContentUpdatableFieldsEquals(expected, actual);
        assertChapterContentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterContentAutoGeneratedPropertiesEquals(ChapterContent expected, ChapterContent actual) {
        assertThat(actual)
            .as("Verify ChapterContent auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterContentUpdatableFieldsEquals(ChapterContent expected, ChapterContent actual) {
        assertThat(actual)
            .as("Verify ChapterContent relevant properties")
            .satisfies(a -> assertThat(a.getNovelId()).as("check novelId").isEqualTo(expected.getNovelId()))
            .satisfies(a -> assertThat(a.getPageId()).as("check pageId").isEqualTo(expected.getPageId()))
            .satisfies(a -> assertThat(a.getCompressed()).as("check compressed").isEqualTo(expected.getCompressed()))
            .satisfies(a ->
                assertThat(a.getCompressedContentType()).as("check compressed contenty type").isEqualTo(expected.getCompressedContentType())
            )
            .satisfies(a -> assertThat(a.getCompressionType()).as("check compressionType").isEqualTo(expected.getCompressionType()))
            .satisfies(a -> assertThat(a.getHash()).as("check hash").isEqualTo(expected.getHash()))
            .satisfies(a -> assertThat(a.getCreateTime()).as("check createTime").isEqualTo(expected.getCreateTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterContentUpdatableRelationshipsEquals(ChapterContent expected, ChapterContent actual) {
        assertThat(actual)
            .as("Verify ChapterContent relationships")
            .satisfies(a -> assertThat(a.getChapter()).as("check chapter").isEqualTo(expected.getChapter()));
    }
}
