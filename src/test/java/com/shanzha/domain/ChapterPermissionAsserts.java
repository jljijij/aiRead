package com.shanzha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChapterPermissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterPermissionAllPropertiesEquals(ChapterPermission expected, ChapterPermission actual) {
        assertChapterPermissionAutoGeneratedPropertiesEquals(expected, actual);
        assertChapterPermissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterPermissionAllUpdatablePropertiesEquals(ChapterPermission expected, ChapterPermission actual) {
        assertChapterPermissionUpdatableFieldsEquals(expected, actual);
        assertChapterPermissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterPermissionAutoGeneratedPropertiesEquals(ChapterPermission expected, ChapterPermission actual) {
        assertThat(actual)
            .as("Verify ChapterPermission auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterPermissionUpdatableFieldsEquals(ChapterPermission expected, ChapterPermission actual) {
        assertThat(actual)
            .as("Verify ChapterPermission relevant properties")
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getChapterId()).as("check chapterId").isEqualTo(expected.getChapterId()))
            .satisfies(a -> assertThat(a.getCanRead()).as("check canRead").isEqualTo(expected.getCanRead()))
            .satisfies(a -> assertThat(a.getCanDownload()).as("check canDownload").isEqualTo(expected.getCanDownload()))
            .satisfies(a -> assertThat(a.getCanComment()).as("check canComment").isEqualTo(expected.getCanComment()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterPermissionUpdatableRelationshipsEquals(ChapterPermission expected, ChapterPermission actual) {
        // empty method
    }
}
