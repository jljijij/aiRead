diff --git a/pom.xml b/pom.xml
index 915847be0cd478e4cda9a6eef73b2a6ece27a236..dddf29eb4ee28370ae11b7a9af2c0c446c3cf840 100644
--- a/pom.xml
+++ b/pom.xml
@@ -278,50 +278,62 @@
         <dependency>
             <groupId>org.redisson</groupId>
             <artifactId>redisson</artifactId>
             <version>${redisson.version}</version>
         </dependency>
         <dependency>
             <groupId>org.testcontainers</groupId>
             <artifactId>jdbc</artifactId>
             <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.testcontainers</groupId>
             <artifactId>junit-jupiter</artifactId>
             <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.testcontainers</groupId>
             <artifactId>mysql</artifactId>
             <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.testcontainers</groupId>
             <artifactId>testcontainers</artifactId>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.apache.pdfbox</groupId>
+            <artifactId>pdfbox</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.poi</groupId>
+            <artifactId>poi-ooxml</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.poi</groupId>
+            <artifactId>poi-scratchpad</artifactId>
+        </dependency>
     </dependencies>

     <build>
         <defaultGoal>spring-boot:run</defaultGoal>
         <resources>
             <resource>
                 <directory>${basedir}/src/main/resources/</directory>
                 <filtering>true</filtering>
                 <includes>
                     <include>config/**/*.yml</include>
                 </includes>
             </resource>
             <resource>
                 <directory>${basedir}/src/main/resources/</directory>
                 <excludes>
                     <exclude>config/**/*.yml</exclude>
                 </excludes>
             </resource>
         </resources>
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-checkstyle-plugin</artifactId>
             </plugin>
             <plugin>
diff --git a/src/main/java/com/shanzha/service/NovelService.java b/src/main/java/com/shanzha/service/NovelService.java
new file mode 100644
index 0000000000000000000000000000000000000000..800b78aabe1ba3de05d0741d7204b76f68505171
--- /dev/null
+++ b/src/main/java/com/shanzha/service/NovelService.java
@@ -0,0 +1,40 @@
+package com.shanzha.service;
+
+import java.io.IOException;
+import java.util.stream.Collectors;
+import org.apache.pdfbox.pdmodel.PDDocument;
+import org.apache.pdfbox.text.PDFTextStripper;
+import org.apache.poi.hwpf.HWPFDocument;
+import org.apache.poi.hwpf.extractor.WordExtractor;
+import org.apache.poi.xwpf.usermodel.XWPFDocument;
+import org.apache.poi.xwpf.usermodel.XWPFParagraph;
+import org.springframework.stereotype.Service;
+import org.springframework.web.multipart.MultipartFile;
+
+@Service
+public class NovelService {
+
+    public String parseFile(MultipartFile file) throws IOException {
+        String filename = file.getOriginalFilename();
+        if (filename == null) {
+            throw new IllegalArgumentException("File name is missing");
+        }
+        String lower = filename.toLowerCase();
+        if (lower.endsWith(".pdf")) {
+            try (PDDocument document = PDDocument.load(file.getInputStream())) {
+                PDFTextStripper stripper = new PDFTextStripper();
+                return stripper.getText(document);
+            }
+        } else if (lower.endsWith(".docx")) {
+            try (XWPFDocument document = new XWPFDocument(file.getInputStream())) {
+                return document.getParagraphs().stream().map(XWPFParagraph::getText).collect(Collectors.joining("\n"));
+            }
+        } else if (lower.endsWith(".doc")) {
+            try (HWPFDocument document = new HWPFDocument(file.getInputStream()); WordExtractor extractor = new WordExtractor(document)) {
+                return extractor.getText();
+            }
+        } else {
+            throw new IllegalArgumentException("Unsupported file type");
+        }
+    }
+}
diff --git a/src/main/java/com/shanzha/web/rest/NovelResource.java b/src/main/java/com/shanzha/web/rest/NovelResource.java
new file mode 100644
index 0000000000000000000000000000000000000000..a136e3f6fdfc95c35cdcbe279daa3d054a7f6a3b
--- /dev/null
+++ b/src/main/java/com/shanzha/web/rest/NovelResource.java
@@ -0,0 +1,27 @@
+package com.shanzha.web.rest;
+
+import com.shanzha.service.NovelService;
+import java.io.IOException;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.multipart.MultipartFile;
+
+@RestController
+@RequestMapping("/api/novels")
+public class NovelResource {
+
+    private final NovelService novelService;
+
+    public NovelResource(NovelService novelService) {
+        this.novelService = novelService;
+    }
+
+    @PostMapping("/parse")
+    public ResponseEntity<String> parse(@RequestParam("file") MultipartFile file) throws IOException {
+        String content = novelService.parseFile(file);
+        return ResponseEntity.ok(content);
+    }
+}
diff --git a/src/main/webapp/app/novel/novel-upload.vue b/src/main/webapp/app/novel/novel-upload.vue
new file mode 100644
index 0000000000000000000000000000000000000000..fe59ac63dc74c318533f75927214d402e5effab9
--- /dev/null
+++ b/src/main/webapp/app/novel/novel-upload.vue
@@ -0,0 +1,32 @@
+<template>
+  <div>
+    <h2>小说上传解析</h2>
+    <input type="file" @change="onFileChange" />
+    <button @click="upload" :disabled="!file">上传并解析</button>
+    <pre v-if="content">{{ content }}</pre>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref } from 'vue';
+import NovelService from './novel.service';
+
+const novelService = new NovelService();
+const file = ref<File | null>(null);
+const content = ref('');
+
+const onFileChange = (e: Event) => {
+  const target = e.target as HTMLInputElement;
+  if (target.files && target.files.length > 0) {
+    file.value = target.files[0];
+  } else {
+    file.value = null;
+  }
+};
+
+const upload = async () => {
+  if (file.value) {
+    content.value = await novelService.parse(file.value);
+  }
+};
+</script>
diff --git a/src/main/webapp/app/novel/novel.service.ts b/src/main/webapp/app/novel/novel.service.ts
new file mode 100644
index 0000000000000000000000000000000000000000..04104f8c25724d7a2f79c415ffe61440cf03990d
--- /dev/null
+++ b/src/main/webapp/app/novel/novel.service.ts
@@ -0,0 +1,16 @@
+import axios from 'axios';
+
+const baseApiUrl = 'api/novels';
+
+export default class NovelService {
+  parse(file: File): Promise<string> {
+    const formData = new FormData();
+    formData.append('file', file);
+    return new Promise((resolve, reject) => {
+      axios
+        .post(`${baseApiUrl}/parse`, formData, { headers: { 'Content-Type': 'multipart/form-data' } })
+        .then(res => resolve(res.data))
+        .catch(err => reject(err));
+    });
+  }
+}
diff --git a/src/main/webapp/app/router/pages.ts b/src/main/webapp/app/router/pages.ts
index 80c2e55fbb0589801e88c68063475c80078b790d..b240e85f52a152e4a2a942acaaffe64bd8254873 100644
--- a/src/main/webapp/app/router/pages.ts
+++ b/src/main/webapp/app/router/pages.ts
@@ -1,5 +1,11 @@
+const NovelUpload = () => import('@/novel/novel-upload.vue');
 // jhipster-needle-add-entity-to-router-import - JHipster will import entities to the router here

 export default [
+  {
+    path: '/novel',
+    name: 'NovelUpload',
+    component: NovelUpload,
+  },
   // jhipster-needle-add-entity-to-router - JHipster will add entities to the router here
 ];
